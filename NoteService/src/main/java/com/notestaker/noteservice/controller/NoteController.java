package com.notestaker.noteservice.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.notestaker.noteservice.entity.Note;
import com.notestaker.noteservice.service.NoteService;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/notestaker/")
public class NoteController {
	
	@Autowired
	private NoteService noteservice;
	
	// get note handler
	@GetMapping("/notes/{id}/{username}")
	public ResponseEntity<Note> getNote(@PathVariable("id") int id, @PathVariable("username") String username) {
		
		Note note = new Note();
		
		try {
			note = this.noteservice.getNote(id, username);
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
		if(note==null)
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		
		return ResponseEntity.status(HttpStatus.OK).body(note);
	}
	
	// get all notes handler
	@GetMapping("/notes/{username}")
	public ResponseEntity<?> getAllNotes(@PathVariable("username") String username) {
		
		System.out.print("get note");
		List<Note> notes;
		
		try {
			 notes = this.noteservice.getAllNotes(username);
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
		if( notes==null || notes.isEmpty())
			return ResponseEntity.status(HttpStatus.OK).body("No records");
		
		return ResponseEntity.status(HttpStatus.OK).body(notes);
	}
	
	// add note handler
	@PostMapping("/notes/{username}")
	public ResponseEntity<?> addNote(@Valid @RequestBody Note newNote, @PathVariable("username") String username) {
		
		// Check validation errors
		if ( newNote.getTitle().length()<1 || newNote.getTitle().length()>70 || 
				newNote.getContent().length()<1 || newNote.getContent().length()>7500  ) {
			        
			return new ResponseEntity<>("Validation errors", HttpStatus.BAD_REQUEST);
		}
		
		if( newNote.getId()!=0 )
			return new ResponseEntity<>("ID will be autogenerated by server", HttpStatus.BAD_REQUEST);
			
		Note note = new Note();
		
		try {
			note = this.noteservice.addNote(username, newNote);
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
		if(note==null)
			return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).build();
		
	    return ResponseEntity.status(HttpStatus.CREATED).body(note);
	}
	
	// delete note handler
	@DeleteMapping("/notes/{id}/{username}")
	public ResponseEntity<Void> deleteNote(@PathVariable("id") int id, @PathVariable("username") String username) {
		System.out.print("delete note");
		
		try {
			if(this.noteservice.deleteNote(id, username)==false)
				return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
		
		return ResponseEntity.status(HttpStatus.OK).build();
	}
	
	// update note handler
	@PutMapping("/notes/{id}/{username}")
	public ResponseEntity<?> updateNote(@PathVariable("id") int id, @Valid @RequestBody Note newNote, 
			@PathVariable("username") String username) {
		
		System.out.print("update note");
		
		// Check validation errors
		if ( newNote.getTitle().length()<1 || newNote.getTitle().length()>70 || 
				newNote.getContent().length()<1 || newNote.getContent().length()>7500 ) {
					        
			return new ResponseEntity<>("Validation errors",  HttpStatus.BAD_REQUEST);
		}
		
		if (newNote.getId()!=0 && newNote.getId()!=id)
			return new ResponseEntity<>("IDs does not match", HttpStatus.BAD_REQUEST);
		
		Note note = new Note();
		
		try {
			note = this.noteservice.updateNote(id, username, newNote);
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
		if(note==null)
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		
		return ResponseEntity.status(HttpStatus.OK).body(note);
	}
	
	// delete all notes handler
	@DeleteMapping("/notes/{username}")
	public ResponseEntity<Void> deleteAllNotes(@PathVariable("username") String username) {
		
		System.out.print("delete note");
			
		try {
			this.noteservice.deleteAllNotes(username);
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
			
		return ResponseEntity.status(HttpStatus.OK).build();
	}
}
